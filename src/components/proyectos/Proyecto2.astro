
---
import Imagen from "./Imagen.astro";
import Video from "./Video.astro";

let nombre = Astro.props.nombre;
let descripcion = Astro.props.descripcion;
let comentarios = Astro.props.comentarios;
let tecnologias = Astro.props.tecnologias;
let urlImagen = Astro.props.urlImagen;
let anchoImagen = Astro.props.anchoImagen;
let urlVideo = Astro.props.urlVideo;
let urlProyecto = Astro.props.urlProyecto || "#";

let derecha = Astro.props.derecha;
---

<div class="divGeneral">
    {derecha ? (
        <>
            <Video class="fadeInLeft" urlVideo={urlVideo} tecnologias={tecnologias} />
            <Imagen class="fadeInRight" class2="derecha" nombre={nombre} descripcion={descripcion} urlImagen={urlImagen} anchoImagen={anchoImagen} urlProyecto={urlProyecto} />
        </>
    ) : (
        <>
            <Imagen class="fadeInLeft" class2="izquierda" nombre={nombre} descripcion={descripcion} urlImagen={urlImagen} anchoImagen={anchoImagen} urlProyecto={urlProyecto} />
            <Video class="fadeInRight" urlVideo={urlVideo} tecnologias={tecnologias} />
        </>
    )}
</div>

<script>
        // Selecciona los elementos que quieres animar
    const elementsLeft = document.querySelectorAll('.fadeInLeft');
    const elementsRight = document.querySelectorAll('.fadeInRight');

    // Crea una instancia de IntersectionObserver
    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            // Si el elemento está en el viewport, añade la clase 'active'
            if (entry.isIntersecting) {
                if (entry.target.classList.contains('fadeInLeft')) {
                    entry.target.classList.add('activeLeft');
                } else if (entry.target.classList.contains('fadeInRight')) {
                    entry.target.classList.add('activeRight');
                }
                observer.unobserve(entry.target);
            }
        });
    }, {
        threshold: 0.5
    });

    // Usa el observer para observar los elementos seleccionados
    elementsLeft.forEach(element => {
        observer.observe(element);
    });
    elementsRight.forEach(element => {
        observer.observe(element);
    });
</script>

<style>

    .divGeneral{
        display: flex;
        justify-content: center;
        gap: 125px;
        width: 100%;
    }

    @media screen and (max-width: 1300px) {
        .divGeneral{
            flex-direction: column;
            align-items: center;
        }
        
    }

    .divImagenLink{
        position: relative;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: fit-content;
        gap: 25px;
    }


    a{
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: var(--color-tertiary-100);

        border-radius: 10px;
        
        padding: 15px 0px;
        color:var(--color-surface-100);
        align-self: center;
        text-decoration: none;
        transition: 0.2s;
    }

    svg{
        stroke:var(--color-surface-100);
        position: absolute;
        transition: 0.1s ease;
    }

    a:hover{
        width: 100px;
        background-color: var(--color-surface-300);
        padding: 15px 50px;
    }
    a:hover .github-text {
        visibility: visible; 
        opacity: 1;
    }
    a:hover svg{
        stroke:var(--color-tertiary-100);
        left:45px; 
    }
    .github-text {
        color: var(--color-tertiary-100);
        margin-left: 35px;
        visibility: hidden; 
        opacity: 0; 
        white-space: nowrap;
        font-weight: bold;
        font-size: 18px;
    }

    .divLink{
        position: absolute;
        top: -25px;
        left: -45px;
    }





</style>
